*	Sentence.spt
*
*	This progam defines a simple sentence grammar, and then
*	accepts sentences from the keyboard to see if they can be
*	matched by the grammar.
*
*	You'll have to examine the program to see the words that
*	it recognizes.  Try it with sentences like:
*
*	Dick walks with Jane.
*	Zippy eats the yellow banana slowly.
*	The aggressive monkey reads the large book, however, Dick is a boy.
*
*	Contributed by Prof. Michael Feldman, George Washington Univ.

	&trace = 500
    &anchor = 0
	&trim = 1
	uppers = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
	lowers = "abcdefghijklmnopqrstuvwxyz"

	bl = span(' ')

	noun = (  'boy' | 'girl' | 'monkey' | 'tree' | 'school' | 'book'
+			| 'banana' ) $ nom
	trace('nom')

	article = ( 'a' | 'the' ) $ art
	trace('art')

	conjunction =  ( 'and' | 'but' | 'however' ) $ conj
	trace('conj')

	proper = ( 'dick' | 'jane' | 'zippy' ) $ prop
	trace('prop')

	pronoun = ( 'he' | 'she' | 'it' ) $ pron
	trace('pron')

	adjective = ( 'large' | 'small' | 'gray' | 'yellow'
+			| 'nice' | 'aggressive' ) $ adj
	trace('adj')

	adverb = ( 'slowly' | 'enthusiastically' ) $ adv
	trace('adv')

	transitive = ( 'reads' | 'gives' | 'eats' | 'writes' ) $ trans
	trace('trans')

	intransitive = ( 'runs' | 'walks' ) $ intrans
	trace('intrans')

	being = ( 'is' | 'was' ) $ be
	trace('be')

	preposition = ( 'to' | 'from' | 'with' ) $ prep
	trace('prep')

	noun.phrase = ( *proper | (*article *bl *noun)
+			| (*article *bl *adjective *bl *noun) ) $ np
	trace('np')

	prep.phrase = ( *preposition *bl *noun.phrase ) $ pp
	trace('pp')

	verb.phrase = ( (*intransitive *bl *prep.phrase)
+			| (*transitive *bl *noun.phrase *bl *prep.phrase)
+			| (*transitive *bl *noun.phrase)
+			| (*being *bl *noun.phrase)
+			| *intransitive | *being ) $ vp
	trace('vp')

	predicate = ( (*verb.phrase *bl *adverb)
+			| *verb.phrase  ) $ pred
	trace('pred')

	subject = ( *pronoun | *noun.phrase ) $ subj
	trace('subj')

	clause = ( *subject *bl *predicate ) $ cl
	trace('cl')

	sentence = pos(0) ( *clause
+		arbno( *bl *conjunction *bl *clause ) )
+ 		$ sent (*bl | "") rpos(0)
	trace('sent')

read	s = input						:f(end)
	output = '-----------------------------------------------'
	output = s
	output = '-----------------------------------------------'
	replace(s,uppers ",.-!?;:",lowers "       ") ? sentence	:s(yes)f(no)
yes	output = '==>sentence found'			:(read)
no	output = 'no' 					:(read)
end
